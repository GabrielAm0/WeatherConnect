export default class Lenis {
    constructor({ wrapper, content, wheelEventsTarget, eventsTarget, smoothWheel, syncTouch, syncTouchLerp, touchInertiaMultiplier, duration, easing, lerp, infinite, orientation, gestureOrientation, touchMultiplier, wheelMultiplier, normalizeWheel, autoResize, }?: {
        wrapper?: Window | HTMLElement;
        content?: HTMLElement;
        wheelEventsTarget?: Window | HTMLElement;
        eventsTarget?: Window | HTMLElement;
        smoothWheel?: boolean;
        syncTouch?: boolean;
        syncTouchLerp?: number;
        touchInertiaMultiplier?: number;
        duration?: number;
        easing?: (t: number) => number;
        lerp?: number;
        infinite?: boolean;
        orientation?: "vertical" | "horizontal";
        gestureOrientation?: "both" | "vertical" | "horizontal";
        touchMultiplier?: number;
        wheelMultiplier?: number;
        normalizeWheel?: boolean;
        autoResize?: boolean;
    });
    options: {
        wrapper: HTMLElement | Window;
        content: HTMLElement;
        wheelEventsTarget: HTMLElement | Window;
        eventsTarget: HTMLElement | Window;
        smoothWheel: boolean;
        syncTouch: boolean;
        syncTouchLerp: number;
        touchInertiaMultiplier: number;
        duration: number;
        easing: (t: number) => number;
        lerp: number;
        infinite: boolean;
        gestureOrientation: "both" | "vertical" | "horizontal";
        orientation: "vertical" | "horizontal";
        touchMultiplier: number;
        wheelMultiplier: number;
        normalizeWheel: boolean;
        autoResize: boolean;
    };
    animate: Animate;
    emitter: Emitter;
    dimensions: Dimensions;
    velocity: number;
    set isLocked(value: any);
    get isLocked(): any;
    set isStopped(value: any);
    get isStopped(): any;
    set isSmooth(value: any);
    get isSmooth(): any;
    set isScrolling(value: any);
    get isScrolling(): any;
    targetScroll: any;
    animatedScroll: any;
    virtualScroll: VirtualScroll;
    destroy(): void;
    on(event: any, callback: any): () => void;
    off(event: any, callback: any): void;
    setScroll(scroll: any): void;
    onVirtualScroll: ({ deltaX, deltaY, event }: {
        deltaX: any;
        deltaY: any;
        event: any;
    }) => void;
    resize(): void;
    emit(): void;
    onNativeScroll: () => void;
    direction: any;
    reset(): void;
    start(): void;
    stop(): void;
    raf(time: any): void;
    time: any;
    scrollTo(target: any, { offset, immediate, lock, duration, easing, lerp, onComplete, force, programmatic, }?: {
        offset?: number;
        immediate?: boolean;
        lock?: boolean;
        duration?: number;
        easing?: (t: number) => number;
        lerp?: number;
        onComplete?: any;
        force?: boolean;
        programmatic?: boolean;
    }): void;
    __preventNextScrollEvent: boolean;
    get rootElement(): HTMLElement | Window;
    get limit(): number;
    get isHorizontal(): boolean;
    get actualScroll(): any;
    get scroll(): any;
    get progress(): number;
    __isSmooth: any;
    __isScrolling: any;
    __isStopped: any;
    __isLocked: any;
    get className(): string;
    toggleClass(name: any, value: any): void;
}
import { Animate } from './animate';
import { Emitter } from './emitter';
import { Dimensions } from './dimensions';
import { VirtualScroll } from './virtual-scroll';
